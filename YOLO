import cv2
import numpy as np
import os
import urllib.request

# === Авто-загрузка файлов YOLO ===
def download_file(url, filename):
    if not os.path.exists(filename):
        print(f"Скачивание {filename}...")
        urllib.request.urlretrieve(url, filename)
        print(f"{filename} загружен.")
    else:
        print(f"{filename} уже существует.")

def auto_download_model_files():
    download_file("https://pjreddie.com/media/files/yolov3.weights", "yolov3.weights")
    download_file("https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3.cfg", "yolov3.cfg")
    download_file("https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names", "coco.names")

# === Загрузка модели ===
def load_model(cfg_path="yolov3.cfg", weights_path="yolov3.weights", names_path="coco.names"):
    net = cv2.dnn.readNet(weights_path, cfg_path)
    with open(names_path, "r", encoding="utf-8") as f:
        classes = f.read().strip().split("\n")
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
    return net, classes, output_layers

# === Обнаружение объектов ===
def detect_objects(net, frame, output_layers):
    height, width = frame.shape[:2]
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), swapRB=True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)
    return outs, width, height

# === Обработка результатов ===
def process_detections(outs, width, height, confidence_threshold=0.5):
    class_ids, confidences, boxes = [], [], []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > confidence_threshold:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, confidence_threshold, 0.4)
    if len(indexes) > 0 and isinstance(indexes, (list, tuple)):
        indexes = np.array(indexes).flatten()
    elif isinstance(indexes, np.ndarray):
        indexes = indexes.flatten()
    else:
        indexes = []
    return boxes, confidences, class_ids, indexes

# === Отрисовка результатов ===
def draw_labels(frame, indexes, boxes, class_ids, confidences, classes, colors):
    for i in indexes:
        x, y, w, h = boxes[i]
        label = f"{classes[class_ids[i]]}: {confidences[i]:.2f}"
        color = colors[class_ids[i] % len(colors)]
        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
        cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# === Главная функция ===
def main():
    print("Выберите режим:")
    print("1 - Обнаружение с веб-камеры")
    print("2 - Обнаружение с видеофайла")

    mode = input("Введите номер режима: ").strip()

    if mode == "1":
        cap = cv2.VideoCapture(0)
    elif mode == "2":
        video_path = input("Введите путь к видеофайлу: ").strip()
        if not os.path.exists(video_path):
            print("Ошибка: Файл не найден.")
            return
        cap = cv2.VideoCapture(video_path)
    else:
        print("Неверный выбор.")
        return

    auto_download_model_files()
    net, classes, output_layers = load_model()
    colors = np.random.uniform(0, 255, size=(len(classes), 3))

    print("Нажмите 'q' для выхода.")
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Конец видео или ошибка.")
            break

        outs, width, height = detect_objects(net, frame, output_layers)
        boxes, confidences, class_ids, indexes = process_detections(outs, width, height)
        draw_labels(frame, indexes, boxes, class_ids, confidences, classes, colors)

        cv2.imshow("YOLOv3: Обнаружение объектов", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# === Запуск ===
if __name__ == "__main__":
    main()
